name: Deploy Staging (ECS + Terraform)

on:
  push:
    branches: [ "main" ]

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  ROLE_TO_ASSUME: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/staging-github-oidc
  FE_REPO: ${{ vars.ECR_REPO_FE }}         # p.ej. staging-frontend
  BE_REPO: ${{ vars.ECR_REPO_BE }}         # p.ej. staging-backend
  FE_IMAGE: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com/${{ vars.ECR_REPO_FE }}
  FE_NGINX_IMAGE: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com/${{ vars.ECR_REPO_FE }}-nginx
  BE_IMAGE: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com/${{ vars.ECR_REPO_BE }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS Credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      # ✅ Instalar Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.5

      # 1) Terraform primero (crea ECR/ECS/ALB/CloudFront/SNS/SSM)
      - name: Terraform Init/Apply
        working-directory: ./infrastructure
        run: |
          terraform -version
          terraform init -input=false
          terraform apply -auto-approve -input=false

      # 2) Login a ECR
      - name: Login to ECR
        uses: aws-actions/amazon-ecr-login@v2

      # 3) (idempotente) crear repos si faltan
      - name: Ensure ECR repositories exist
        shell: bash
        run: |
          set -euo pipefail
          for r in "${FE_REPO}" "${BE_REPO}" "${FE_REPO}-nginx"; do
            aws ecr describe-repositories --repository-names "$r" >/dev/null 2>&1 || \
            aws ecr create-repository --repository-name "$r" >/dev/null
          done

      # 4) Build & Push imágenes
      - name: Build & Push Frontend
        working-directory: ./frontend
        run: |
          docker build -t "$FE_IMAGE:latest" .
          docker push "$FE_IMAGE:latest"

      - name: Build & Push Frontend Nginx Auth Sidecar
        working-directory: ./frontend
        run: |
          docker build -t "$FE_NGINX_IMAGE:latest" -f Dockerfile.nginx .
          docker push "$FE_NGINX_IMAGE:latest"

      - name: Build & Push Backend
        working-directory: ./backend
        run: |
          docker build -t "$BE_IMAGE:latest" .
          docker push "$BE_IMAGE:latest"

      # 5) Re-apply para rodar servicios con las nuevas imágenes
      - name: Terraform Apply (roll services to latest)
        working-directory: ./infrastructure
        run: |
          terraform apply -auto-approve -input=false
